package storage

// ATTENTION!
// This rule was autogenerated!
// Before making changes, consider updating the generator.

// generator-locked
import (
	"github.com/aquasecurity/tfsec/internal/app/tfsec/block"
	"github.com/aquasecurity/tfsec/internal/app/tfsec/scanner"
	"github.com/aquasecurity/tfsec/pkg/provider"
	"github.com/aquasecurity/tfsec/pkg/result"
	"github.com/aquasecurity/tfsec/pkg/rule"
	"github.com/aquasecurity/tfsec/pkg/severity"
)

func init() {
	scanner.RegisterCheckRule(rule.Rule{
		Provider:  provider.AzureProvider,
		Service:   "storage",
		ShortCode: "container_delete_retention_policy",
		Documentation: rule.RuleDocumentation{
			Summary:     "Container soft delete protects your data from being accidentally deleted by maintaining the deleted data in the system for a specified period of time. During the retention period, you can restore a soft-deleted container and its contents to the container's state at the time it was deleted. After the retention period has expired, the container and its contents are permanently deleted.",
			Explanation: "Container soft delete protects your data from being accidentally deleted, to restore a container that has been deleted. To learn how to enable container soft delete, see Enable and manage soft delete for containers.",
			Impact:      "Container can be restored if its deleted in retention period described.After the retention period has expired, the container is permanently deleted",
			Resolution:  "Specifies the number of days that the container should be retained, between 1 and 365 days. Defaults to 7.",
			BadExample: []string{`
			resource "azurerm_resource_group" "example" {
				name     = "example-resources"
				location = "West Europe"
			  }
			  
			  resource "azurerm_virtual_network" "example" {
				name                = "virtnetname"
				address_space       = ["10.0.0.0/16"]
				location            = azurerm_resource_group.example.location
				resource_group_name = azurerm_resource_group.example.name
			  }
			  
			  resource "azurerm_subnet" "example" {
				name                 = "subnetname"
				resource_group_name  = azurerm_resource_group.example.name
				virtual_network_name = azurerm_virtual_network.example.name
				address_prefixes     = ["10.0.2.0/24"]
				service_endpoints    = ["Microsoft.Sql", "Microsoft.Storage"]
			  }
			  
			  resource "azurerm_storage_account" "example" {
				name                = "storageaccountname"
				resource_group_name = azurerm_resource_group.example.name
			  
				location                 = azurerm_resource_group.example.location
				account_tier             = "Standard"
				account_replication_type = "LRS"
				min_tls_version          = "TLS1_2"
			  
				network_rules {
				  default_action             = "Deny"
				  ip_rules                   = ["100.0.0.1"]
				  virtual_network_subnet_ids = [azurerm_subnet.example.id]
				}
			  
				tags = {
				  environment = "staging"
				}
			   blob_properties {
				container_delete_retention_policy = ""
			   } 
			  }


`, `
resource "azurerm_resource_group" "example" {
	name     = "example-resources"
	location = "West Europe"
  }
  
  resource "azurerm_virtual_network" "example" {
	name                = "virtnetname"
	address_space       = ["10.0.0.0/16"]
	location            = azurerm_resource_group.example.location
	resource_group_name = azurerm_resource_group.example.name
  }
  
  resource "azurerm_subnet" "example" {
	name                 = "subnetname"
	resource_group_name  = azurerm_resource_group.example.name
	virtual_network_name = azurerm_virtual_network.example.name
	address_prefixes     = ["10.0.2.0/24"]
	service_endpoints    = ["Microsoft.Sql", "Microsoft.Storage"]
  }
  
  resource "azurerm_storage_account" "example" {
	name                = "storageaccountname"
	resource_group_name = azurerm_resource_group.example.name
  
	location                 = azurerm_resource_group.example.location
	account_tier             = "Standard"
	account_replication_type = "LRS"
	min_tls_version          = "TLS1_2"
  
	network_rules {
	  default_action             = "Deny"
	  ip_rules                   = ["100.0.0.1"]
	  virtual_network_subnet_ids = [azurerm_subnet.example.id]
	}
  
	tags = {
	  environment = "staging"
	}
   blob_properties {
	container_delete_retention_policy = {}
   } 
  }
`,
				`resource "azurerm_resource_group" "example" {
	name     = "example-resources"
	location = "West Europe"
  }
  
  resource "azurerm_storage_account" "example" {
	name                     = "storageaccountname"
	resource_group_name      = azurerm_resource_group.example.name
	location                 = azurerm_resource_group.example.location
	account_tier             = "Standard"
	account_replication_type = "GRS"
  
	tags = {
	  environment = "staging"
	}
	blob_properties {
		container_delete_retention_policy = {}
	} 
  }`,
				`
  resource "azurerm_resource_group" "example" {
	name     = "example-resources"
	location = "West Europe"
  }
  
  resource "azurerm_storage_account" "example" {
	name                     = "storageaccountname"
	resource_group_name      = azurerm_resource_group.example.name
	location                 = azurerm_resource_group.example.location
	account_tier             = "Standard"
	account_replication_type = "GRS"
  
	tags = {
	  environment = "staging"
	}
	blob_properties {
		container_delete_retention_policy = "8"
	} 
  }
  `,
			},
			GoodExample: []string{`
			resource "azurerm_resource_group" "example" {
				name     = "example-resources"
				location = "West Europe"
			  }
			  
			  resource "azurerm_virtual_network" "example" {
				name                = "virtnetname"
				address_space       = ["10.0.0.0/16"]
				location            = azurerm_resource_group.example.location
				resource_group_name = azurerm_resource_group.example.name
			  }
			  
			  resource "azurerm_subnet" "example" {
				name                 = "subnetname"
				resource_group_name  = azurerm_resource_group.example.name
				virtual_network_name = azurerm_virtual_network.example.name
				address_prefixes     = ["10.0.2.0/24"]
				service_endpoints    = ["Microsoft.Sql", "Microsoft.Storage"]
			  }
			  
			  resource "azurerm_storage_account" "example" {
				name                = "storageaccountname"
				resource_group_name = azurerm_resource_group.example.name
			  
				location                 = azurerm_resource_group.example.location
				account_tier             = "Standard"
				account_replication_type = "LRS"
				min_tls_version          = "TLS1_2"
			  
				network_rules {
				  default_action             = "Deny"
				  ip_rules                   = ["100.0.0.1"]
				  virtual_network_subnet_ids = [azurerm_subnet.example.id]
				}
			  
				tags = {
				  environment = "staging"
				}
			   blob_properties {
				container_delete_retention_policy = 1
			   } 
			  }

`,
				`  resource "azurerm_storage_account" "example" {
	name                     = "storageaccountname"
	resource_group_name      = azurerm_resource_group.example.name
	location                 = azurerm_resource_group.example.location
	account_tier             = "Standard"
	account_replication_type = "GRS"
  
	tags = {
	  environment = "staging"
	}
	blob_properties {
		container_delete_retention_policy = 365
	} 
  }`,
				`
resource "azurerm_resource_group" "example" {
	name     = "example-resources"
	location = "West Europe"
  }
  
  resource "azurerm_virtual_network" "example" {
	name                = "virtnetname"
	address_space       = ["10.0.0.0/16"]
	location            = azurerm_resource_group.example.location
	resource_group_name = azurerm_resource_group.example.name
  }
  
  resource "azurerm_subnet" "example" {
	name                 = "subnetname"
	resource_group_name  = azurerm_resource_group.example.name
	virtual_network_name = azurerm_virtual_network.example.name
	address_prefixes     = ["10.0.2.0/24"]
	service_endpoints    = ["Microsoft.Sql", "Microsoft.Storage"]
  }
  
  resource "azurerm_storage_account" "example" {
	name                = "storageaccountname"
	resource_group_name = azurerm_resource_group.example.name
  
	location                 = azurerm_resource_group.example.location
	account_tier             = "Standard"
	account_replication_type = "LRS"
	min_tls_version          = "TLS1_2"
  
	network_rules {
	  default_action             = "Deny"
	  ip_rules                   = ["100.0.0.1"]
	  virtual_network_subnet_ids = [azurerm_subnet.example.id]
	}
  
	tags = {
	  environment = "staging"
	}
   blob_properties {
	container_delete_retention_policy = 365
   } 
  }
`,
			},
			Links: []string{
				"https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#container_delete_retention_policy",
				"https://docs.microsoft.com/en-us/azure/storage/blobs/soft-delete-container-overview",
			},
		},
		RequiredTypes:   []string{"resource"},
		RequiredLabels:  []string{"azurerm_storage_account"},
		DefaultSeverity: severity.Low,
		CheckFunc: func(set result.Set, resourceBlock block.Block, module block.Module) {
			if resourceBlock.IsResourceType("azurerm_storage_account") {
				if resourceBlock.MissingChild("blob_properties") {
					//Because its Optional
					return
				}
				resourceBlock = resourceBlock.GetBlock("blob_properties")

				if resourceBlock.MissingChild("container_delete_retention_policy") {
					//Its optional So it can be missed
					return
				}
				deleteRetention := resourceBlock.GetAttribute("container_delete_retention_policy")
				if deleteRetention.IsNotNil() && deleteRetention.IsNumber() {
					if deleteRetention.GreaterThan(365) || deleteRetention.LessThanOrEqualTo(0) {
						set.AddResult().
							WithDescription("Resource '%s' does not have container_delete_retention_policy greater than 365 or Less Than 0 if Provided Default Value 7  `azurerm_storage_account.", resourceBlock.FullName())
					}
				} else if !deleteRetention.IsNumber() {
					set.AddResult().
						WithDescription("Resource '%s' does not have container_delete_retention_policy value  in number format. if not provided Default Value 7  `azurerm_storage_account.", resourceBlock.FullName())
				} else {
					return
				}
			}
		},
	})
}
